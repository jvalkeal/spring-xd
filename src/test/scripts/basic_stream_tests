#!/bin/bash

. xdapi

TEST_DIR=/tmp/xdtest/basic

wait_for_server

rm -R $TEST_DIR &> /dev/null
set -e

echo -e '*** Test 1. time | log stream\n'

create_stream 'ticktock' 'time | log' 'false'
list_streams
deploy_stream 'ticktock'

echo -e '*** Test 2. time | jdbc stream\n'

create_stream 'timejdbc' 'time | jdbc --initializeDatabase=true'

echo -e '*** Test 3. http | file stream\n'

create_stream 'httptofile' "http | file --dir=$TEST_DIR"

# Run, undeploy, redeploy and run again

curl -d blah "$XD_HOST:9000"
result=`cat $TEST_DIR/httptofile.out`
assert_equals 'blah' $result

rm -R $TEST_DIR &> /dev/null
undeploy_stream 'httptofile'

echo 'Redeploying and running again...'

deploy_stream 'httptofile'
list_streams

curl -d blah "$XD_HOST:9000"
result=`cat $TEST_DIR/httptofile.out`
assert_equals 'blah' $result

destroy_stream 'ticktock'
destroy_stream 'httptofile'
destroy_stream 'timejdbc'

echo -e '*** Test 4. http | filter | file stream\n'
create_stream 'httpfilter1' "http | good: filter --expression=payload=='good' | good2: filter --expression=payload=='good' | good3: filter --expression=payload=='good' | file --dir=$TEST_DIR"
create_stream 'httpfilter1tap'  "tap:stream:httpfilter1.good > counter --name=good"
# Send one message
curl -d 'good' $XD_HOST:9000

good=`curl $XDURL/metrics/counters/good | grep -o value\":.`
destroy_metric counters/good
destroy_stream 'httpfilter1tap'
destroy_stream 'httpfilter1'

# This fails when we have multiple filters
#assert_equals 'value":1' $good

echo -e '*** Test 5. tcp | file stream\n'

create_stream 'tcptofile' "tcp --port=21234 --socketTimeout=2000 | file --dir=$TEST_DIR"

echo -en 'blahblah\r\n' | netcat localhost 21234
sleep 2
destroy_stream 'tcptofile'

result=`cat $TEST_DIR/tcptofile.out`
assert_equals 'blahblah' $result

echo -e '*** Test 6. http | filter | file with JSON\n'

# Filter for good and bad
create_stream 'httpfilter' "http | good: filter --expression=#jsonPath(payload,'\$.entities.hashtags[*].text').contains('good') \
                                 | aftergood: filter --expression=true \
                                 | bad:  filter --expression=#jsonPath(payload,'\$.entities.hashtags[*].text').contains('bad') \
                                 | json-field-extractor --fieldName=id \
                                 | file --dir=$TEST_DIR"

# Add taps to count at each stage
create_stream 'httptap'  "tap:stream:httpfilter.aftergood > counter --name=goodtweets"
create_stream 'httptap2'  "tap:stream:httpfilter.json-field-extractor > counter --name=goodandbadtweets"

# Send some JSON messages only one of which contains both the required hashtags 'good' and 'bad'
curl -d '{"id":9,"entities":{"hashtags":[{"text":"good"},{"text":"bad"}],"urls":[]}}' "$XD_HOST:9000"
curl -d '{"id":2,"entities":{"hashtags":[{"text":"good"},{"text":"good"}],"urls":[]}}' "$XD_HOST:9000"
curl -d '{"id":3,"entities":{"hashtags":[{"text":"bad"},{"text":"bad"}],"urls":[]}}' "$XD_HOST:9000"

goodandbadtweets=`curl $XDURL/metrics/counters/goodandbadtweets | grep -o value\":.`
goodtweets=`curl $XDURL/metrics/counters/goodtweets | grep -o value\":.`
destroy_stream 'httptap'
destroy_stream 'httptap2'
destroy_stream 'httpfilter'
destroy_metric counters/goodtweets
destroy_metric counters/goodandbadtweets

result=`cat $TEST_DIR/httpfilter.out`
# We should get the id of the first message
assert_equals '9' $result

# Should be two good tweets and 1 'good and bad'
assert_equals 'value":1' $goodandbadtweets
#assert_equals 'value":2' $goodtweets

echo -e '\nAll Good :-)\n'

